Package Management Systems (for Python)


# Intro
Python ist besonders reich an externen Bibliotheken, die zur Nutzung in eigenen Projekten bereitgestellt werden.
Zur Nutzung jener Bibliotheken (/packages) wird ein package manager benutzt.

Im Folgenden werden die verfuegbaren Package Manager auf Ihre Funktionalitaeten, Vor- und Nachteile analysiert.

Man verzeihe den Mix aus Englisch und Deutsch.


# Jobs of these tools
Package Manager und virtuelle Environments sind eng verworben. Typischerweise sollen Sie folgende Aufgaben uebernehmen.

1. Aufgabe_1: Dependency resolution
2. Aufgabe_2: Developing and distribution custom built packages
3. Aufgabe_3: Project isolation

Zu Aufgabe_1: Verschiedene Bibliotheken benoetigen andere Bibliotheken (Dependencies), um funktionieren zu koennen. Insbesondere setzen die Pakete bestimmte Versionen der Dependencies voraus.

So kann es schnell zu Konflikten kommen, da ein zwei Pakete dieselbe Dependency mit unterschiedlichen Versionen benoetigen.
Ein Package Manager loest die Konflikte im Optimalfall automatisch.


# Auswahlkriterien
Im folgenden sollen einige Merkmale gelistet werden, die einen package manager auszeichnen.

• Verfuegbarkeit von Bibliotheken
• Dependency resolution capabilities
• Ease of use
• Speed
• Language agnosticity
• Ease of deployment & integration (docker etc.)
• upgradability and reproducability of environments

Ein wichtiger Mechanismus um Reproducability zu generieren sind sog. Lock files.
Ein solches Lock File spezifiziert die genauen Dependencies fuer *alle* dependencies (auch fuer transitive (‘ungewollt installierte’ deps)


# Package Manager
Eine Auswahl von Package Managern, die aktuell (Stand 07/23) bei Python Entwicklern Anklang finden sind
• Conda (Anaconda/ Miniconda, Mamba)
• Pip (+Venv)
• Pipenv
• pyenv
• Poetry

## Pip (+Venv)
• Standard dependency/ package manager shipping with the python installation
• braucht Venv, um die Arbeit an mehreren Projekten zu trennen
• Pip loest Aufgabe_1 und Venv loest Aufgabe_2
• - no difference dev and production packages
• - no way to specify insatlled versions of nested dependencies
• - no lock file → inconsistent result using a requirements.txt file
• - venv unhandlich, jedes mal aktivieren, vergisst man schnell mal



## Conda
Conda erlaubt die Erstellung von environments.
Ein erheblicher Nachteil ist, dass Conda automatisch recht viele, nicht notwendige dependencies bei Installation eines packages mitinstalliert.

• Conda is a package manager as well as a virtual environment manager. It unifies the functionalities of pip and venv
• Conda is cross language, supporting pacakage managemetn not only for Python but also for R and some other languages
• very easy to use (and well documented)
• can be used in combination with pip (in the conda env, in case a package is not available in conda repos)
• sometimes some difficulty installing on Windows
• basic Anaconda installation at approx. 3GB which is quite large. Alternative in miniconda.
• difficult to build own conda packages (if ever needed)

A link describing how to achieve reproducability and upgradeability in conda: https://pythonspeed.com/articles/conda-dependency-management/



## pyenv
Pyenv hat dieselbe Aufgabe wie venv allerdigns nur fuer den Python interpreter, der fuer ein spezifisches Projekt genutzt wird


## Pipenv
• claims to have exceptional cross plaform support (also for Windows)
• Recommended on official python webpage
• Easy to seperate dev and production environments
• has pipfile.lock to ensure that when installing an env, always same package versions are installed, also for nested dependencies
• combines power of pip and venv


## Poetry
• Easy to seperate dev and production environments
• single file to manage dependencies (.toml file)
• improving on Pipenv which in turn is recommended by Python.org
• The python project added the pyproject.toml file as the central file to manage dependencies
• 

# Random Notes
• some propose using conda with poetry (https://ealizadeh.com/blog/guide-to-python-env-pkg-dependency-using-conda-poetry/)
• Make sure all the essential packages support poetry as a package manager. This is for example (07/23) not the case for torch.


Eine offizielle Quelle dafuer ist: https://packaging.python.org/en/latest/guides/tool-recommendations/

Achtung: Poetry eignet sich Stand heute (07/23) nicht fuer die Verwaltung von Proketen, die auf Pytorch angewiesen sind. Pytroch unterstuetzt bisher nur Anaconda und pip als dependency/ package managers.

Daher werden wir fuer dieses Projekt PipEnv nutzen.


                                    * * *
                                    
